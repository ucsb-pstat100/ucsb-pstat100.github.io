[
  {
    "objectID": "Pages/schedule.html",
    "href": "Pages/schedule.html",
    "title": "PSTAT 100: Data Science Concepts and Analysis",
    "section": "",
    "text": "Note\n\n\n\nThis page will be updated as we progress through the quarter; please check back regularly for updates!\n\n\n\n\n\n\n\n\nTextbook Abbreviations and Icon Meanings\n\n\n\n\nMDSR = Modern Data Science with R\nIMS = Introduction to Modern Statistics, 2nd Ed.\nR4DS = R for Data Science\nISL = An Introduction to Statistical Learning with Applications in R\nAMAW = All Models are Wrong\n = Lecture\n = Lab\n = Paper\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWEEK\nDATE\nREADING\nTOPIC\nMATERIALS\n\n\n\n\n1\nMon, Jun 23\n MSDR, Chapter 1: Prologue: Why Data Science?   IMS, 1.2.2: Types of Variable\nIntroduction to Data\n Lec01 Slides\n\n\n\n\nTue, Jun 24\n R4DS, Chapter 5: Data tidying   R4DS, Chapter 3: Data transformation   Hadley Wichkam Tidy Data, Journal of Statistical Software (2014)\nData Structures and Tidy Data\n Lec02 Slides    Lab01: Welcome to the tidyverse!\n\n\n\n\nWed, Jun 25\n MDSR, Chapter 3: A Grammar for Graphics   R4DS, Chapter 9: Layers   Hadley Wichkam A Layered Grammar of Graphics, Journal of Computational and Graphical Statistics (2010) \nVisualizations, Part I\n Lec03 Slides\n\n\n\n\nThu, Jun 26\n R4DS, Chapter 11: Communication   MDSR, Chapter 2: Data Visualization   IMS, Chapter 6: Applications: Explore\nVisualizations, Part II\n Lec04 Slides    Lab02: Bobabase (Databases and Joins)\n\n\n\n\nSun, Jun 29\n\n\n\n\nHOMEWORK 1 DUE\n\n\n2\nMon, Jun 30\n AMAW, Chapter 3: Geometric Duality   MDSR, Chapter 12.2: Dimension Reduction \nGeometry of Data\n Lec05 Slides\n\n\n\n\nTue, Jul 1\n Chapter 10 (Principal Components Analysis) of Introduction to Statistical Learning with Applications in R\nPCA\n Lec06 Slides    Lab03: Boots the House Down, Mama (PCA)\n\n\n\n\nWed, Jul 2\n\n\nReview/Catch-up\n Lec07 Slides\n\n\n\n\nThu, Jul 3\n\n\nIN-CLASS ASSESSMENT 01\n Lab04\n\n\n3\nMon, Jul 7\n Bhaskaran and Smeeth What is the difference between missing completely at random and missing at random?, International Journal of Epidemiology (2014)\nSampling / Missing Data\n Lec08 Slides\n\n\n\n\nTue, Jul 8\n IMS, Chapter 2: Study Design   Selected Sections from IMS, “Foundations of Inference” and “Statistical Inference”\nStudy Design / Sampling Distributions\n Lec09 Slides   Lab05\n\n\n\n\nWed, Jul 9\n MDSR, Chapter 9: Statistical Foundations   IMS, Chapter 12: Confidence Intervals with Bootstrapping\nEstimation / Confidence Intervals\n Lec10 Slides\n\n\n\n\nThu, Jul 10\n IMS, Chapter 13: Inference with Mathematical Models\nHypothesis Testing, I\n Lec11 Slides   Lab06\n\n\n\n\nSun, Jul 13\n\n\n\n\nMID-QUARTER PROJECT DUE\n\n\n4\nMon, Jul 14\n Selected Sections from IMS, “Foundations of Inference” and “Statistical Inference”\nHypothesis Testing, II\n Lec12 Slides\n\n\n\n\nTue, Jul 15\n Section 2.1 (What is Statistical Learning?) of Introduction to Statistical Learning with Applications in R\nIntroduction to Statistical Modeling\n Lec13 Slides   Lab07\n\n\n\n\nWed, Jul 16\n MDSR, Appendix E: Regression Modeling\nRegression, Part I\n Lec14 Slides\n\n\n\n\nThu, Jul 17\n MDSR, Appendix E: Regression Modeling\nRegression, Part II\n Lab08\n\n\n\n\nSun, Jul 20\n\n\n\n\nHOMEWORK 2 DUE\n\n\n5\nMon, Jul 21\n MDSR, Appendix E: Regression Modeling\nRegression, Part III\n Lec15 Slides\n\n\n\n\nTue, Jul 22\n MDSR, Chapter 10: Predictive Modeling   IMS, Chapter 9: Logistic Regression   MDSR, Chapter 11.1: Non-Regression Classifiers\nClassification\n Lec16 Slides   Lab09\n\n\n\n\nWed, Jul 23\n\n\nReview/Catch-Up\n Lec17 Slides\n\n\n\n\nThu, Jul 24\n\n\nIN-CLASS ASSESSMENT 02\n Lab10\n\n\n6\nMon, Jul 28\n Chapter 10 (Principal Components Analysis) of Introduction to Statistical Learning with Applications in R\nData Ethics\n Lec18 Slides\n\n\n\n\nTue, Jul 29\n TBD\nCausal Inference\n Lec19 Slides   Lab11\n\n\n\n\nWed, Jul 30\n TBD\nNeural Networks\n Lec20 Slides\n\n\n\n\nThu, Jul 31\n TBD\nClosing Remarks\n Lab12\n\n\n\n\nFri, Aug 1\n\n\nFINAL PROJECT DUE"
  },
  {
    "objectID": "Pages/schedule.html#course-schedule",
    "href": "Pages/schedule.html#course-schedule",
    "title": "PSTAT 100: Data Science Concepts and Analysis",
    "section": "",
    "text": "Note\n\n\n\nThis page will be updated as we progress through the quarter; please check back regularly for updates!\n\n\n\n\n\n\n\n\nTextbook Abbreviations and Icon Meanings\n\n\n\n\nMDSR = Modern Data Science with R\nIMS = Introduction to Modern Statistics, 2nd Ed.\nR4DS = R for Data Science\nISL = An Introduction to Statistical Learning with Applications in R\nAMAW = All Models are Wrong\n = Lecture\n = Lab\n = Paper\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWEEK\nDATE\nREADING\nTOPIC\nMATERIALS\n\n\n\n\n1\nMon, Jun 23\n MSDR, Chapter 1: Prologue: Why Data Science?   IMS, 1.2.2: Types of Variable\nIntroduction to Data\n Lec01 Slides\n\n\n\n\nTue, Jun 24\n R4DS, Chapter 5: Data tidying   R4DS, Chapter 3: Data transformation   Hadley Wichkam Tidy Data, Journal of Statistical Software (2014)\nData Structures and Tidy Data\n Lec02 Slides    Lab01: Welcome to the tidyverse!\n\n\n\n\nWed, Jun 25\n MDSR, Chapter 3: A Grammar for Graphics   R4DS, Chapter 9: Layers   Hadley Wichkam A Layered Grammar of Graphics, Journal of Computational and Graphical Statistics (2010) \nVisualizations, Part I\n Lec03 Slides\n\n\n\n\nThu, Jun 26\n R4DS, Chapter 11: Communication   MDSR, Chapter 2: Data Visualization   IMS, Chapter 6: Applications: Explore\nVisualizations, Part II\n Lec04 Slides    Lab02: Bobabase (Databases and Joins)\n\n\n\n\nSun, Jun 29\n\n\n\n\nHOMEWORK 1 DUE\n\n\n2\nMon, Jun 30\n AMAW, Chapter 3: Geometric Duality   MDSR, Chapter 12.2: Dimension Reduction \nGeometry of Data\n Lec05 Slides\n\n\n\n\nTue, Jul 1\n Chapter 10 (Principal Components Analysis) of Introduction to Statistical Learning with Applications in R\nPCA\n Lec06 Slides    Lab03: Boots the House Down, Mama (PCA)\n\n\n\n\nWed, Jul 2\n\n\nReview/Catch-up\n Lec07 Slides\n\n\n\n\nThu, Jul 3\n\n\nIN-CLASS ASSESSMENT 01\n Lab04\n\n\n3\nMon, Jul 7\n Bhaskaran and Smeeth What is the difference between missing completely at random and missing at random?, International Journal of Epidemiology (2014)\nSampling / Missing Data\n Lec08 Slides\n\n\n\n\nTue, Jul 8\n IMS, Chapter 2: Study Design   Selected Sections from IMS, “Foundations of Inference” and “Statistical Inference”\nStudy Design / Sampling Distributions\n Lec09 Slides   Lab05\n\n\n\n\nWed, Jul 9\n MDSR, Chapter 9: Statistical Foundations   IMS, Chapter 12: Confidence Intervals with Bootstrapping\nEstimation / Confidence Intervals\n Lec10 Slides\n\n\n\n\nThu, Jul 10\n IMS, Chapter 13: Inference with Mathematical Models\nHypothesis Testing, I\n Lec11 Slides   Lab06\n\n\n\n\nSun, Jul 13\n\n\n\n\nMID-QUARTER PROJECT DUE\n\n\n4\nMon, Jul 14\n Selected Sections from IMS, “Foundations of Inference” and “Statistical Inference”\nHypothesis Testing, II\n Lec12 Slides\n\n\n\n\nTue, Jul 15\n Section 2.1 (What is Statistical Learning?) of Introduction to Statistical Learning with Applications in R\nIntroduction to Statistical Modeling\n Lec13 Slides   Lab07\n\n\n\n\nWed, Jul 16\n MDSR, Appendix E: Regression Modeling\nRegression, Part I\n Lec14 Slides\n\n\n\n\nThu, Jul 17\n MDSR, Appendix E: Regression Modeling\nRegression, Part II\n Lab08\n\n\n\n\nSun, Jul 20\n\n\n\n\nHOMEWORK 2 DUE\n\n\n5\nMon, Jul 21\n MDSR, Appendix E: Regression Modeling\nRegression, Part III\n Lec15 Slides\n\n\n\n\nTue, Jul 22\n MDSR, Chapter 10: Predictive Modeling   IMS, Chapter 9: Logistic Regression   MDSR, Chapter 11.1: Non-Regression Classifiers\nClassification\n Lec16 Slides   Lab09\n\n\n\n\nWed, Jul 23\n\n\nReview/Catch-Up\n Lec17 Slides\n\n\n\n\nThu, Jul 24\n\n\nIN-CLASS ASSESSMENT 02\n Lab10\n\n\n6\nMon, Jul 28\n Chapter 10 (Principal Components Analysis) of Introduction to Statistical Learning with Applications in R\nData Ethics\n Lec18 Slides\n\n\n\n\nTue, Jul 29\n TBD\nCausal Inference\n Lec19 Slides   Lab11\n\n\n\n\nWed, Jul 30\n TBD\nNeural Networks\n Lec20 Slides\n\n\n\n\nThu, Jul 31\n TBD\nClosing Remarks\n Lab12\n\n\n\n\nFri, Aug 1\n\n\nFINAL PROJECT DUE"
  },
  {
    "objectID": "Pages/schedule.html#course-calendar",
    "href": "Pages/schedule.html#course-calendar",
    "title": "PSTAT 100: Data Science Concepts and Analysis",
    "section": "Course Calendar",
    "text": "Course Calendar"
  },
  {
    "objectID": "Pages/Lab00/quarto.html",
    "href": "Pages/Lab00/quarto.html",
    "title": "Lab 00: Introduction to Quarto",
    "section": "",
    "text": "# no required packages for this lab\n\n\n\nThis lab covers the following topics:\n\nBasics of Markdown syntax\nBasics of LaTeX syntax\nCode chunk options in .qmd files\n\n\n\n\n\nPortions of Chapter 28 and Chapter 29 in R4DS"
  },
  {
    "objectID": "Pages/Lab00/quarto.html#lab-objectives",
    "href": "Pages/Lab00/quarto.html#lab-objectives",
    "title": "Lab 00: Introduction to Quarto",
    "section": "",
    "text": "This lab covers the following topics:\n\nBasics of Markdown syntax\nBasics of LaTeX syntax\nCode chunk options in .qmd files"
  },
  {
    "objectID": "Pages/Lab00/quarto.html#relevant-textbook-chapterssections",
    "href": "Pages/Lab00/quarto.html#relevant-textbook-chapterssections",
    "title": "Lab 00: Introduction to Quarto",
    "section": "",
    "text": "Portions of Chapter 28 and Chapter 29 in R4DS"
  },
  {
    "objectID": "Pages/Info/staff.html",
    "href": "Pages/Info/staff.html",
    "title": "Course Staff",
    "section": "",
    "text": "INSTRUCTOR: Ethan P. Marzban (He/Him)\n\nHello! My name is Ethan P. Marzban (he/him), and I’m currently a PhD student in the Department of Statistics here at UCSB. My current research intersects several sub-fields of statistics, including mathematical statistics, nonparametric statistics, and Bayesian statistics. I’m also passionate about Stats/Data Science Education! In my free time, I enjoy playing the piano, drinking boba, and talking about cats. I’m super excited to be your instructor this quarter!\nEmail: epmarzban@pstat.ucsb.edu\n\n\n\n\n\n\n\nOffice Hours\nLocation\n\n\n\n\nTBD\nTBD\n\n\nTBD\nTBD\n\n\n\n\n\nTEACHING ASSISTANT (TA): Erika McPhillips (She/Her)\n\nMore information coming soon!\nEmail: elm00@pstat.ucsb.edu\n\n\n\n\n\n\n\nOffice Hours\nLocation\n\n\n\n\nTBD\nTBD\n\n\nTBD\nTBD"
  },
  {
    "objectID": "Pages/projects.html",
    "href": "Pages/projects.html",
    "title": "Information about Course Projects",
    "section": "",
    "text": "More Information will be posted here during Week 1.\n\n\n\n\n\nMore Information will be posted here during Week 1."
  },
  {
    "objectID": "Pages/projects.html#mid-quarter-project",
    "href": "Pages/projects.html#mid-quarter-project",
    "title": "Information about Course Projects",
    "section": "",
    "text": "More Information will be posted here during Week 1.\n\n\n\n\n\nMore Information will be posted here during Week 1."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PSTAT 100: Summer Session A 2025",
    "section": "",
    "text": "PSTAT 100 - Data Science: Concepts and Analysis\n\n\n\n\nInstructor:\nEthan P. Marzban (He/Him)\n\n\n\n\nQuarter:\nSummer Session A, 2025\n\n\n\nCourse Description: Overview of data science key concepts and the use of tools for data retrieval, analysis, visualization, and reproducible research. Topics include an introduction to inference and prediction, principles of measurement, missing data, and notions of causality, statistical “traps”, and concepts in data ethics and privacy. Case studies will illustrate the importance of domain knowledge. Credit units: 4.\n\n\n\n\nWelcome to PSTAT 100! This is the official course page for the Summer Session A, 2025 iteration of the course - the Spring 2024 iteration has been moved to ucsb-pstat100-archives.github.io.\nLecture slides can be found on the Schedule; labs and project datasets can be found on our Course Computing Server, a link to which can be found on our course Canvas page. Please note, for security purposes, we can only share the link to the server with students who are currently enrolled in the course.\n\n\n\n\n\n\n\n\n    \n        \n            Important Course Assessments/Deadlines\n            \n                \n                    Homework 1\n                    Week 1 | Sunday, June 29, 2025\n                \n                \n                    In-Class Assessment 1\n                    Week 2 | Thursday, July 3, 2025\n                \n                \n                    Mid-Quarter Project\n                    Week 3 | Sunday, July 13, 2025\n                \n                \n                    Homework 2\n                    Week 4 | Sunday, July 20, 2025\n                \n                \n                    In-Class Assessment 2\n                    Week 5 | Thursday, July 24, 2025\n                \n                \n                    Final Project\n                    Week 6 | Friday, August 8, 2025\n                \n            \n        \n    \n\n\n\n\n\n\n\nImportant\n\n\n\nIn addition to the above deadlines, there will be two labs every week which you will be asked to turn in. These labs are designed to be completed during our scheduled Discussion Section periods."
  },
  {
    "objectID": "Pages/ICAs.html",
    "href": "Pages/ICAs.html",
    "title": "Information about ICAs",
    "section": "",
    "text": "More Information will be posted here as we get closer to the date of the first ICA."
  },
  {
    "objectID": "Pages/Info/policies.html",
    "href": "Pages/Info/policies.html",
    "title": "PSTAT 100: Data Science Concepts and Analysis",
    "section": "",
    "text": "Welcome to PSTAT 100: Data Science Concepts and Analysis! I am very excited to join you as your instructor this quarter. Our journey together will take us through the basics of Data Science, and aims to prepare you for your future endeavors in the field, whether they be in classes, industry, or academia. Here’s to a great quarter!     – Ethan"
  },
  {
    "objectID": "Pages/Info/policies.html#course-staff-and-lecture-logistics",
    "href": "Pages/Info/policies.html#course-staff-and-lecture-logistics",
    "title": "PSTAT 100: Data Science Concepts and Analysis",
    "section": " Course Staff and Lecture Logistics",
    "text": "Course Staff and Lecture Logistics\nInstructor: Ethan P. Marzban (he/him)\n\n\n\n\n\n\nLecture Times and Location\n\n\n\nM, T, W, R from 12:30 - 1:35pm in ILP 2207\n\n\nTeaching Assistant: Erika McPhillips\nSections:\n\nTuesdays and Thursdays, 2 - 2:50pm in PHELPS 1517\nTuesdays and Thursdays, 3 - 3:50pm in PHELPS 1517"
  },
  {
    "objectID": "Pages/Info/policies.html#course-description",
    "href": "Pages/Info/policies.html#course-description",
    "title": "PSTAT 100: Data Science Concepts and Analysis",
    "section": " Course Description",
    "text": "Course Description\nAs stated in the UCSB Course Catalog:\n\nOverview of data science key concepts and the use of tools for data retrieval, analysis, visualization, and reproducible research. Topics include an introduction to inference and prediction, principles of measurement, missing data, and notions of causality, statistical traps, and concepts in data ethics and privacy. Case studies illustrate the importance of domain knowledge.\n\nIndeed, this course is designed to be a hands-on introduction to Data Science for intermediate-level students with some exposure to probability and basic computation skills, but with few or no upper-division courses in statistics."
  },
  {
    "objectID": "Pages/Info/policies.html#prerequisites",
    "href": "Pages/Info/policies.html#prerequisites",
    "title": "PSTAT 100: Data Science Concepts and Analysis",
    "section": " Prerequisites:",
    "text": "Prerequisites:\n\nPSTAT 120A (Probability at a calculus-based level)\nMATH 4A (a first pass at Linear Algebra)\nPrior experience with a programming language (e.g. Python through CMPSC 9 or CMPSC 16).\n\nNote on Programming: the primary programming language of this course will be R, though you are not expected to necessarily have prior experience coding with R (so long as you have experience coding in another language, e.g. Python, Julia, etc.). With that said, if this is your first time coding in R, I encourage you to consult the Lab00 files on this course website (accessible by clicking the relevant link in the navbar)."
  },
  {
    "objectID": "Pages/Info/policies.html#textbooksreadings",
    "href": "Pages/Info/policies.html#textbooksreadings",
    "title": "PSTAT 100: Data Science Concepts and Analysis",
    "section": " Textbooks/Readings",
    "text": "Textbooks/Readings\nThere are four main textbooks for this class (all of which are freely available online; links provided below); readings will be regularly assigned from them:\n\nModern Data Science with R (2e), by Benjamin S. Baumer, Daniel T. Kaplan, and Nicholas J. Horton.\nIntroduction to Modern Statistics, 2nd Ed., by Mine Çetinkaya-Rundel and Johanna Hardin\nR for Data Science (2e), by Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund\nAn Introduction to Statistical Learning with Applications in R, by Gareth James, Daniela Witten, Trevor Hastie, and Robert Tibshirani\n\nWe will also read through a handful of articles; these will all appear in the Course Schedule.\n\nAdditional (Optional) Texts\n\nLearning Data Science, by Sam Lau, Joey Gonzalez, and Deb Nolan  A great comprehensive resource, but written in Python (so be aware!)\nAn Introduction to R, by Alex Douglas, Deon Roos, Francesca Mancini, Ana Couto & David Lusseau  A good textbook for those of you new to programming in R"
  },
  {
    "objectID": "Pages/Info/policies.html#learning-outcomes",
    "href": "Pages/Info/policies.html#learning-outcomes",
    "title": "PSTAT 100: Data Science Concepts and Analysis",
    "section": " Learning Outcomes",
    "text": "Learning Outcomes\nBy the end of this course, you should be able to:\n\ncritically assess data quality and sampling design\nretrieve, inspect, and clean raw data\nunderstand the basics of exploratory, descriptive, visual, and inferential techniques\ninterpret and communicate results in context"
  },
  {
    "objectID": "Pages/Info/policies.html#assessments",
    "href": "Pages/Info/policies.html#assessments",
    "title": "PSTAT 100: Data Science Concepts and Analysis",
    "section": " Assessments",
    "text": "Assessments\n\nLabs: shorter, structured coding assignments designed to introduce programming concepts and skills. There will be a Lab assignment associated with every Discussion Section; labs will be due (TBD).\nHomeworks: slightly larger in scope than labs; will contain both programming and theoretical/conceptual concepts. We will have a total of 2 homework assignments released throughout the quarter. Homeworks are designed to probe your theoretical understanding of concepts that arise in the field of Data Science, as well as prepare you for the projects by asking you to address more open-ended questions.\nMid-Quarter Project: more open-ended than homeworks and labs, and is designed to more closely simulate real-world data science projects and endeavors. Details on the mid-quarter project will be released in the later part of Week 1.\nFinal Project: a final, comprehensive project that will be due on Friday August 1, 2025. You will be required to work in teams on the Final Project.\n\n\n\n\n\n\n\nFinal Project\n\n\n\nThe final project will be due by 11:59pm on Friday, August 1, 2025.\n\n\n\n2 In-Class Assessments (ICAs) will be administered (see below for dates). I hesitate to call these “exams” because they are not intended to be as high-stakes as exams, however they are designed to test your retention of course material. More information will be released as we approach the date of the first ICA.\n\n\n\n\n\n\n\nAssessment Dates\n\n\n\n\nIn-Class Assessment 1: Thursday, July 3, 2025 in TBD, during our regularly-scheduled lecture time\nIn-Class Assessment 1: Thursday, July 24, 2025 in TBD, during our regularly-scheduled lecture time\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThere will be no ICAs offered at alternate times, for any reasons. So, please plan accordingly!\n\n\n\nFinal Course Grades\nYour final course grade will be computed according to the following weights:\n\n\n\nAssessment\nWeight\n\n\n\n\nLabs\n10%\n\n\nHW\n20% (10% each)\n\n\nMid-Quarter Project\n20%\n\n\nFinal Project\n25%\n\n\nIn-Class Assessments\n25%\n\n\n\nYour final letter grade will be issued according to the following scheme (note that I am using interval notation: \\([a, b)\\) means all numbers greater than or equal to \\(a\\) but less than (and not equal to) \\(b\\)):\n\n\n\n\n\n\n\n\n\nGrade\nCourse Percentage\n\n\n\n\nA+\n100%\n\n\nA\n[95.0000, 100.0000)\n\n\nA-\n[90.0000, 95.0000)\n\n\nB+\n[86.3333, 90.0000)\n\n\nB\n[83.3333, 86.3333)\n\n\nB-\n[80.0000, 83.3333)\n\n\n\n\n\n\n\n\nGrade\nCourse Percentage\n\n\n\n\nC+\n[76.0000, 80.3333)\n\n\nC\n[73.3333, 76.3333)\n\n\nC-\n[70.0000, 73.3333)\n\n\nD+\n[66.0000, 70.3333)\n\n\nD\n[63.3333, 66.3333)\n\n\nD-\n[60.0000, 63.3333)\n\n\nF\n&lt; 60%\n\n\n\n\n\n\nI have elected to adopt an uncurved grading scheme to eliminate any sense of “competition” among students; I highly encourage you all to collaborate with and uplift each other. Having said that, I will certainly consider adjusting the cutoffs at the end of the quarter if necessary."
  },
  {
    "objectID": "Pages/Info/policies.html#policies",
    "href": "Pages/Info/policies.html#policies",
    "title": "PSTAT 100: Data Science Concepts and Analysis",
    "section": " Policies",
    "text": "Policies\n\nLate Submissions\nI understand that life happens! To that effect, I am allowing:\n\nOne late homework, which must be submitted within 24 hours of the original deadline\nTwo late labs, which must be submitted within 24 hours of the original deadline\n\nGiven that the projects will be submitted in groups, no late submissions for the projects will be accepted for any reason. Additionally, as stated above, we will not be offering any make-ups for the ICAs; furthermore, failure to take both ICAs will result in a grade of “F” being administered.\n\n\nCommunication\nThere are two primary means of communication outside of scheduled class meetings: office hours and an EdStem Discussion Forum (please see Canvas for a join link; for security purposes, we are only allowing currently-enrolled students join the discussion forum). If you are unsure of how to reach out to appropriate parties, please consult the following table:\n\n\n\nTopic\nRedirect to…\n\n\n\n\nTroubleshooting codes\nEdStem\n\n\nChecking answers\nOffice hours or EdStem\n\n\nClarifying assignment content\nOffice hours or EdStem\n\n\nAssignment submission\nGradescope\n\n\nRe-evaluation request\nGradescope\n\n\nQuestion about missing grades\nFill Out This Form\n\n\n\nSome additional comments:\n\nPlease note that we (the course staff) request you refrain from emailing us except in case of extreme emergency (it is up to you to decide what is an ‘emergency’). Please bring all of your questions to the course staff during either Office Hours or after Lecture/Section. Thank you!\nIf you have questions or concerns about missing grades, please use the form linked in the table above. You are allowed to submit the form multiple times, but we ask that you please wait at least 48 business hours before submitting follow-ups. Thank you!\n\n\n\nCollaboration and Academic Integrity\nData Science (as we will see) is an inherently collaborative field. Indeed, collaboration is required for both projects; collaboration is also encouraged for homework and lab assignments. However, there are limitations to collaboration:\n\ncollaboration on the ICAs is strictly prohibited\ndo not copy other people’s work and try to pass it off as your own\nif/when you work in groups, include the names of all group members on the assignment\n\nFailure to abide by these principles will be treated as academic misconduct. Anyone found guilty of academic misconduct will be reported to the Academic Senate, and will receive at minimum a failing grade on the assignment in question; further actions may also include failing the course, and marks being made on permanent records. Depending on the severity of the infraction, expulsion is also a possibility.\nBasically, don’t cheat- please! If you’re ever struggling with course material, please come talk to me or the TA’s. We are truly here for you, and want only the best for you.\n\n\nSection Switching\nLab Sections take place in special “Collaborate Classrooms” which are equipped with laptops. There are only a fixed number of seats and laptops in these classrooms, meaning we cannot under any circumstance over-enroll sections. Therefore, if you want to switch section unofficially (we do not have the ability to switch your official enrollment through GOLD), please follow the steps at this link. Any requests to switch sections that do not adhere to the guidelines posted at that link will be ignored.\n\n\nAI Policy\nIt is undeniable that the recent advances in Generative AI (GenAI) and Large Language Models (LLMs) like ChatGPT have reshaped the educational landscape. Indeed, when utilized properly, they can be an incredibly useful power. With that said, I would like to establish some clear ground rules with regards to the use of GenAI in this class:\n\nThe use of AI on ICAs is strictly prohibited.\nThe use of AI on other assignments is discouraged, but not prohibited - I only ask that if you use AI (for a HW, Lab, or Project) that you please cite it.\n\nIf it is found that you used AI without citing its use, this will be treated as academic misconduct.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nPlease be careful when using Generative AI. It is still a relatively new innovation, and can not only occasionally produce inaccurate answers but can also produce unethical answers. Read all terms and conditions carefully, and ensure you understand (a) how the tool will give you an answer, and (b) what the tool will do with your data."
  },
  {
    "objectID": "Pages/Info/policies.html#disabled-students-program-dsp",
    "href": "Pages/Info/policies.html#disabled-students-program-dsp",
    "title": "PSTAT 100: Data Science Concepts and Analysis",
    "section": " Disabled Students Program (DSP)",
    "text": "Disabled Students Program (DSP)\nIf you have a disability, or otherwise require accommodations for the ICAs please reach out to the Disabled Students Program (DSP) ASAP to ensure your request(s) for accommodation can be processed. We ask that all requests be logged at least a week in advance, to ensure the system enough time to process. Please note that we cannot grant any requests for accommodations unless they come to us from DSP directly."
  },
  {
    "objectID": "Pages/Info/policies.html#technology-needs",
    "href": "Pages/Info/policies.html#technology-needs",
    "title": "PSTAT 100: Data Science Concepts and Analysis",
    "section": " Technology Needs",
    "text": "Technology Needs\nAs a part of this course, you will be required to program in R. Though the Lab Sections take place in specially designed classrooms that come equipped with computers, your homework and quizzes may cover R-related questions, which means we expect you to have access to a laptop capable of connecting to the internet. If you do not currently possess such a laptop, please check out UCSB’s Basic Needs Resource page on Technology Resources to try and acquire one."
  },
  {
    "objectID": "Pages/Info/policies.html#disclaimer",
    "href": "Pages/Info/policies.html#disclaimer",
    "title": "PSTAT 100: Data Science Concepts and Analysis",
    "section": " Disclaimer",
    "text": "Disclaimer\nThe instructor reserves the right to modify this syllabus if he deems such modifications academically advisable. Such modifications, should they occur, will be announced publicly."
  },
  {
    "objectID": "Pages/Info/policies.html#faculty-mentor",
    "href": "Pages/Info/policies.html#faculty-mentor",
    "title": "PSTAT 100: Data Science Concepts and Analysis",
    "section": " Faculty Mentor",
    "text": "Faculty Mentor\nThe faculty mentor for this course is Dr. Jack Miller. They can be reached at jbmiller@pstat.ucsb.edu. Please note that Dr. Miller will not be able to authorize regrades or accommodations/extensions for the course; for such inquiries, please utilize the communications channels listed above. Thank you!"
  },
  {
    "objectID": "Pages/Info/policies.html#some-general-tips-for-success",
    "href": "Pages/Info/policies.html#some-general-tips-for-success",
    "title": "PSTAT 100: Data Science Concepts and Analysis",
    "section": " Some General Tips for Success",
    "text": "Some General Tips for Success\n\nForm study groups\nData Science is not meant to be a lonely field! There is much we can learn from one another, and it can be an incredibly enlightening experience to discuss problems and ideas with one another. (Just make sure you don’t violate any of the Academic Integrity points listed above)\n\n\nStart things early!\nMake sure you’re giving yourself enough time to complete the homework assignments, labs, projects, and make sure to leave plenty of time to study for the ICAs. I’d recommend creating a weekly schedule for yourself, and allocating time each day for PSTAT 100 material (whether that be working on an assignment, reading lecture slides, or coming to Office Hours.\n\n\nPractice Makes Progress\nThe best way to start learning Data Science is to start doing Data Science. The various textbooks and resources linked on the Course Website come equipped with additional practice problems and exercises which I highly recommend you work through.\n\n\nAttend Office Hours (TA and Instructor) regularly\nEven if you don’t have a specific question, you’re always more than welcome to sit in on Office Hours and listen to other people’s questions. (Sometimes, doing so will help you formulate your own questions!)\n\n\nAttend Lectures and Discussion Sections.\nIt’s true that we do not have an attendance policy, but please don’t let yourselves fall behind on attendance. Studies show that regular exposure is the best way to learn material, and there really is no substitute for going to Section and Lecture. Also, while you’re in Lecture, take your own notes! Even the act of writing things down and having to synthesize what you think is important information can help you process and learn the material in real time.\n\n\nDon’t Be Too Hard on Yourself!\nThough a little stress can be a good motivating factor for some, please don’t stress yourself out too much. Your performance in this course is not an evaluation of who you are as a person!"
  },
  {
    "objectID": "Pages/Lab00/intro2r.html",
    "href": "Pages/Lab00/intro2r.html",
    "title": "Lab 00: Introduction to R",
    "section": "",
    "text": "Tip\n\n\n\nThis lab is long! Use the floating table of contents (at the top-right of the screen) to jump to sections as needed."
  },
  {
    "objectID": "Pages/Lab00/intro2r.html#lab-objectives",
    "href": "Pages/Lab00/intro2r.html#lab-objectives",
    "title": "Lab 00: Introduction to R",
    "section": "Lab Objectives",
    "text": "Lab Objectives\nThis lab covers the following topics:\n\nBasics of coding in R"
  },
  {
    "objectID": "Pages/Lab00/intro2r.html#relevant-textbook-chapterssections",
    "href": "Pages/Lab00/intro2r.html#relevant-textbook-chapterssections",
    "title": "Lab 00: Introduction to R",
    "section": "Relevant Textbook Chapters/Sections:",
    "text": "Relevant Textbook Chapters/Sections:\n\nVarious chapters of I2R\nPortions of Chapter 2 in R4DS\nPortions of Chapter 27 in R4DS"
  },
  {
    "objectID": "Pages/Lab00/intro2r.html#r-basics",
    "href": "Pages/Lab00/intro2r.html#r-basics",
    "title": "Lab 00: Introduction to R",
    "section": "R Basics",
    "text": "R Basics\nA mentioned previously, the programming language we will be using this quarter is R. Developed in the 1990s at Bell Labs, it was built upon the S language, with the crucial benefit of being freely available to the public.\nR understand many of the basic mathematical operations we use on paper:\n\n\n\nOperation\nR Symbol\nExample\n\n\n\n\nAddition\n+\n2 + 3\n\n\nSubtraction\n-\n2 - 3\n\n\nMultiplication\n*\n2 * 3\n\n\nExponentiation\n^\n2 ^ 3\n\n\nDivision\n/\n2 / 3\n\n\n\nFor example:\n\n((2 + 3) / 4) ^ 5\n\n[1] 3.051758\n\n\nNote: like most programming languages, R obeys the order of operations:\n\nParentheses\nExponentiation\nMultiplication\nDivision\nAddition\nSubtraction\n\nThe variable assignment operator in R (i.e. the symbol we use to assign a value to a variable) is &lt;-:\n\nx &lt;- 2\nx\n\n[1] 2\n\n\n\n\n\n\n\n\nTip\n\n\n\nTechnically, using = will also work for variable assignment:\n\ny = 2\ny\n\n[1] 2\n\n\nHowever, when programming in R, it is customary to use the &lt;- operator instead.\n\n\nThere are a couple of restrictions on what we can name variables in R:\n\nVariable names cannot start with a number (but they can contain numbers). So 2var is not a valid variable name, whereas var2 is.\nVariable names cannot start with a period (but they can contain periods). So .my_var is not a valid variable name but my.var is.\nVariable names cannot include special characters (e.g. +, *, etc.) anywhere. For instance, *myvar is not a valid variable name.\n\n\n\n\n\n\n\nNote for Python Users\n\n\n\nIf you are a Python user, you might not be used to using periods in variable names (since, in Python, periods typically deliniate the start of a method). In R, periods do not have any correspondence with methods or functions, so feel free to use them in your variable names!"
  },
  {
    "objectID": "Pages/Lab00/intro2r.html#data-types-and-data-structures",
    "href": "Pages/Lab00/intro2r.html#data-types-and-data-structures",
    "title": "Lab 00: Introduction to R",
    "section": "Data Types and Data Structures",
    "text": "Data Types and Data Structures\nWe can think of data types as the fundamental classes to which objects belong. There are 4 main data types in R:\n\ndouble (aka numeric; refers to real numbers)\ninteger\ncharacter (aka string)\nlogical (aka boolean)\n\nWe can extract the particular data type of an object using the typeof() function:\n\ntypeof(1)\n\n[1] \"double\"\n\ntypeof(1L)\n\n[1] \"integer\"\n\ntypeof(\"hello world\")\n\n[1] \"character\"\n\ntypeof(TRUE)\n\n[1] \"logical\"\n\n\nA note on booleans: in R, there are only two logical objects: TRUE (which is equivalent to T) and FALSE (which is equivalent to F). Pay close attention to the capitalization: True is NOT a valid logical type object in R (even though it is in Python)!\n\n\n\n\n\n\nNote\n\n\n\nThere are actually two more data types in R: \"complex\" and \"raw\". You may want to familiarize yourself with the \"complex\" type (which deals with complex numbers), but it is highly unlikely you will ever encounter the \"raw\" type in the wild.\n\n\nIndividual R objects can be collectively arranged into larger, more complex data structures. There are 6 main data structures in R:\n\nscalars: scalar values (i.e. single values)\nvectors: sequence of values, that must all be of the same type\nmatrices: rows and columns of values\narrays: rows, columns, and layers of values (you can think of these as essentially matrices stacked on top of each other, or, more mathematically, as akin to tensors), all of the same type\nlists: rows, columns, and layers of values, potentially of different types\nfactors: sequences of categorical values\ndataframes: rows and columns of values, potentially of different types\n\nAs you can see, there are some pairs of data structures that appear similar, but differ in the key aspect of whether or not they allow different data types. We will revisit this notion in a bit.\n\nVectors and Matrices\nFirst, let’s talk about how to create vectors in R. (In many ways, vectors form the fundamental unit in R.) The easiest way is to use the combine function, c():\n\nc(1, 2, \"hello\", \"world\")\n\n[1] \"1\"     \"2\"     \"hello\" \"world\"\n\n\n\n\n\n\n\n\nImportant\n\n\n\nDon’t forget the c when creating vectors! Simply listing the elements of a vector within a set of parentheses in R will result in an error:\n\n(1, 2, \"hello\", \"world\")\n\nError in parse(text = input): &lt;text&gt;:1:3: unexpected ','\n1: (1,\n      ^\n\n\n\n\nTo create a matrix, we use the matrix() function:\n\nmatrix(c(1, 2, 3, 4), \n       nrow = 2,\n       byrow = T)\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\n\nNote the specification of byrow = T: this simply tells R to populate the elements of the matrix by rows. In contrast, we could have specified byrow = F:\n\nmatrix(c(1, 2, 3, 4), \n       nrow = 2,\n       byrow = F)\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n\nNow, let’s demonstrate what is meant by the fact that all objects in a matrix must be of the same type. Specifically, let’s try and create a matrix from the elements 1, 2, \"hello\", \"world\":\n\nmatrix(c(1, 2, \"hello\", \"world\"),\n       nrow = 2,\n       byrow = F)\n\n     [,1] [,2]   \n[1,] \"1\"  \"hello\"\n[2,] \"2\"  \"world\"\n\n\nNotice that R has automatically coerced all of the elements to be characters (even though the numbers 1 and 2 were originally specified using the double type)!\n\n\nDataframes\nIndeed, this is one of the motivating factors for using dataframes, instead of matrices. To create a dataframe from scratch, we use the data.frame() function, and specify the columns of the data frame:\n\ndata.frame(\n  c(1, 2),\n  c(\"hello\", \"world\")\n)\n\n  c.1..2. c..hello....world..\n1       1               hello\n2       2               world\n\n\nA couple of things to note:\n\nWe’ve managed to preserve the original data types of our objects.\nBy default, dataframes have column names (and the default names that R creates are pretty sucky…)\n\nLet’s explicitly specify our column names:\n\ndata.frame(\n  col1 = c(1, 2),\n  col2 = c(\"hello\", \"world\")\n)\n\n  col1  col2\n1    1 hello\n2    2 world\n\n\nIf we really wanted to, we could even specify row names:\n\ndata.frame(\n  col1 = c(1, 2),\n  col2 = c(\"hello\", \"world\"),\n  row.names = c(\"row1\", \"row2\")\n)\n\n     col1  col2\nrow1    1 hello\nrow2    2 world\n\n\nWe’ve posted a separate lab covering even more operations on dataframes, which can be accessed here.\n\n\nFactors\nAs mentioned above, factors are ideal when encoding categorical data. Recall (from Lecture 01) that categorical variables can be further subdivided into nominal and ordinal variables; analagously, R has factors and ordered factors.\nAs a simple example:\n\nfav_cols &lt;- factor(\n  c(\"red\", \"green\", \"blue\", \"green\", \"yellow\")\n)\nfav_cols\n\n[1] red    green  blue   green  yellow\nLevels: blue green red yellow\n\n\nTo extract the levels of a factor (i.e. the categories), we use the levels() function:\n\nlevels(fav_cols)\n\n[1] \"blue\"   \"green\"  \"red\"    \"yellow\"\n\n\nIf we wanted to create an ordered factor, we can still use the factor() function but now pass in an additional argument that states ordered = T:\n\nmy_grades &lt;- factor(\n  c(\"A+\", \"A-\", \"A\", \"A-\"),\n  ordered = T,\n  levels = c(\"A+\", \"A\", \"A-\")\n)\n\nmy_grades\n\n[1] A+ A- A  A-\nLevels: A+ &lt; A &lt; A-"
  },
  {
    "objectID": "Pages/Lab00/intro2r.html#functions",
    "href": "Pages/Lab00/intro2r.html#functions",
    "title": "Lab 00: Introduction to R",
    "section": "Functions",
    "text": "Functions\nThe syntax of a function call in R is of the form:\n\nfunc_name(arg1, arg2, ...)\n\nFor example, to compute the sum of a vector we can use the sum() function:\n\nsum(c(1, 3, 5, 7))\n\n[1] 16\n\n\n\n\n\n\n\n\nTip\n\n\n\nTo access the help file for a function func_name, type ?func_name (replacing func_name with the actual name of the function) in an R console.\n\n\nTo define a function in R, we use the syntax\n\nfunc_name &lt;- function(arg1 = default1, arg2 = default2, ...) {\n  &lt;body of function&gt;\n}\n\nNote that we do not need to specify defaults for any of the arguments of a function. For example:\n\nnew_function &lt;- function(x, y = 1) {\n  return(x^2 + y^2)\n}\n\nnew_function(1, 2)  # should return 1^2 + 2^2; i.e. 5\n\n[1] 5\n\nnew_function(1)     # should return 1^2 + 1^2; i.e. 2\n\n[1] 2"
  },
  {
    "objectID": "Pages/Lab00/intro2r.html#comparisons-and-control",
    "href": "Pages/Lab00/intro2r.html#comparisons-and-control",
    "title": "Lab 00: Introduction to R",
    "section": "Comparisons and Control",
    "text": "Comparisons and Control\nWe can use any of our standard mathematical comparisons in R.\n\n\n\nSymbol\nExample\nMeaning\n\n\n\n\n==\na == b\nIs a equal to b?\n\n\n&lt;=\na &lt;= b\nIs a less than or equal to b?\n\n\n&gt;=\na &lt;= b\nIs a greater than or equal to b?\n\n\n&lt;\na &lt; b\nIs a less than b?\n\n\n&gt;\na &gt; b\nIs a greater than b?\n\n\n!\n!p\nNegation of p\n\n\n|\np | q\nVectorized ‘or’: p or q\n\n\n&\np & q\nVectorized ‘and’: p and q\n\n\n\nNote that the result of a comparison is a vector of logicals, with TRUE in positions where the comparison holds and FALSE in positions where the comparison does not hold. For example:\n\nx &lt;- c(1, 2, 3)\ny &lt;- c(2, 1, 4)\n\nThe way we interpret this output is:\n\nThe first element of x was less than or equal to the first element of y\nThe second element of x was not less than or equal to the second element of y\nThe third element of x was less than or equal to the third element of y\n\nWe most often use the result of comparisons in conditional statements (aka control flow). Conditional statements in R are structured as follows:\n\nif(cond1) {\n  &lt;executes if cond1 is true&gt;\n} else if(cond2) {\n  &lt;executes if cond2 is true&gt;\n} ... else {\n  &lt;executes if none of the previous conditions are true&gt;\n}\n\nFor example:\n\nx &lt;- 15\n\nif(x &lt;= 10) {\n  print(\"x is small\")\n} else if (x &lt;= 20) {\n  print(\"x is moderate\")\n} else {\n  return(\"x is massive!\")\n}\n\n[1] \"x is moderate\"\n\n\nOne thing to note is that each of the conditions must be a scalar of length 1:\n\nx &lt;- c(15, 15)\n\nif(x &lt;= 10) {\n  print(\"x is small\")\n} else if (x &lt;= 20) {\n  print(\"x is moderate\")\n} else {\n  return(\"x is massive!\")\n}\n\nError in if (x &lt;= 10) {: the condition has length &gt; 1\n\n\nIf we want to control based on vector conditions, and we have only two cases to consider, we can use the ifelse() function. For example:\n\nx &lt;- c(2, 3, 4, 5, 6) \n\nifelse(x %% 2 == 0, \"even\", \"odd\")\n\n[1] \"even\" \"odd\"  \"even\" \"odd\"  \"even\""
  },
  {
    "objectID": "Pages/Lab00/intro2r.html#loops",
    "href": "Pages/Lab00/intro2r.html#loops",
    "title": "Lab 00: Introduction to R",
    "section": "Loops",
    "text": "Loops\nIn R, there are three types of loops: for loops, while loops, and repeat loops. Since I hope you have already been exposed to loops I’ll bypass a detailed discussion of how they work, opting instead to simply highlight the R syntax of loops.\n\nfor-loops\nA for loops is ideal when you want to repeat a task a fixed number of times. For example:\n\nfor(k in 2:4) {\n  print(k)\n}\n\n[1] 2\n[1] 3\n[1] 4\n\n\nWe […]\n\nfor( k in 1:6) {\n  if(k %% 2 == 0) {\n    print(paste(k, \"is even\"))\n  } else {\n    print(paste(k, \"is odd\"))\n  }\n}\n\n[1] \"1 is odd\"\n[1] \"2 is even\"\n[1] \"3 is odd\"\n[1] \"4 is even\"\n[1] \"5 is odd\"\n[1] \"6 is even\"\n\n\n\n\nwhile- and repeat-loops\nThe remaining two types of loops in R (while and repeat loops) aren’t used as frequently as for loops, but I feel it prudent to at least mention their existence. Unlike for loops, while and repeat loops do not (necessarily) run for a fixed number of iterations - rather, they continue looping until a condition is met.\n\nFor example, to convert the first for loop above to a while loop, we could use\n\nk &lt;- 2\nwhile(k &lt;= 4) {\n  print(k)\n  k &lt;- k + 1\n}\n\n[1] 2\n[1] 3\n[1] 4\n\n\nWe could also convert the loop above to a repeat loop:\n\nk &lt;- 2\nrepeat {\n  if(k &gt; 4) {\n    break\n  } else {\n    print(k)\n    k &lt;- k + 1\n  }\n}\n\n[1] 2\n[1] 3\n[1] 4"
  },
  {
    "objectID": "Pages/Lab00/intro2r.html#packages",
    "href": "Pages/Lab00/intro2r.html#packages",
    "title": "Lab 00: Introduction to R",
    "section": "Packages",
    "text": "Packages\nIn R, we use the term packages to refer to collections of functions and objects stored under a common name. (This is the equivalent of what is often referred to as a module, in Python).\nTo install a package in R, we use the syntax\n\ninstall.packages(\"&lt;package_name&gt;\")\n\nIf you try to install a package you have already installed, R will give you a warning message prompting you to either update the package or cancel your command.\nTo load a package into a document or working environment, use the library() function:\n\nlibrary(&lt;package_name&gt;) # note the LACK of quotation marks!\n\nAs an example, you’ll notice a code chunk at the start of this lab with the command library(ottr)- this command loads the ottr package into our environment (which in turn gives us access to various autograder-related functionality).\n\n\n\n\n\n\nTip\n\n\n\nFor more information about R packages, consult this resource."
  },
  {
    "objectID": "Pages/Lab00/intro2r.html#the-vectorization-of-r",
    "href": "Pages/Lab00/intro2r.html#the-vectorization-of-r",
    "title": "Lab 00: Introduction to R",
    "section": "The Vectorization of R",
    "text": "The Vectorization of R\nIt is often stated that R is vectorized. Effectively, this means that the fundamental object in R is a vector, and most functions, when applied to vectors, are applied element-wise.\nFor instance:\n\nc(1, 2, 3) + c(1, 1, 1)\n\n[1] 2 3 4\n\n\nis equivalent to\n\nc(1, 2, 3) + 1\n\n[1] 2 3 4\n\n\nSince columns and rows of matrices are effectively stored as vectors, this makes adding a scalar to each element of a matrix fairly easy:\n\nM &lt;- matrix(1:6, nrow = 3, byrow = T)\nM\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6\n\nM + 2\n\n     [,1] [,2]\n[1,]    3    4\n[2,]    5    6\n[3,]    7    8\n\n\nMost functions are also vectorized; i.e. allow for vector-valued inputs. If you want to make a user-defined function vectorized, you can wrap your function in a call to the Vectorize() function. For example, consider the following implementation of the sign function:\n\nsgn_non_vectorized &lt;- function(x) {\n  if(x &lt; 0) {\n    return(\"negative\")\n  } else if(x == 0) {\n    return(\"zero\")\n  } else {\n    return(\"positive\")\n  }\n}\n\nCalling sgn_non_vectorized(-1) is fine:\n\nsgn_non_vectorized(-1)\n\n[1] \"negative\"\n\n\nhowever calling sgn_non_vectorized(c(-1, 1)) causes problems:\n\nsgn_non_vectorized(c(-1, 1))\n\nError in if (x &lt; 0) {: the condition has length &gt; 1\n\n\nWe can fix this using the Vectorize() function:\n\nsgn_vectorized &lt;- Vectorize(\n  function(x){sgn_non_vectorized(x)}\n)\nsgn_vectorized(c(-1, 1))\n\n[1] \"negative\" \"positive\"\n\n\nBy the way, note that the above example also demonstrates the following: unlike in Python, you do not need to explicitly include a return statement in the body of an R function. By default, R will return whatever the final non-assignment step of your code is.\n\nLeveraging Vectorization to Bypass Loops\nAn interesting consequence of the vectorized nature of R is that we can actually bypass loops in certain contexts. Functions that help us do this include (but are not limited to):\n\napply(): applies a function to either rows or columns (or both) of an array or matrix\nlapply() and sapply(): applies a function across a list (differences between the functions largely boil down to the data type/structure of output)\n\nAs an example, consider the following matrix M (which we encountered above)\n\nM\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6\n\n\nTo compute row averages (i.e. averages across rows), we could use a for loop:\n\nrow_avgs &lt;- c()\nfor(k in 1:nrow(M)) {\n  row_avgs &lt;- c(row_avgs, mean(M[k,]))\n}\nrow_avgs\n\n[1] 1.5 3.5 5.5\n\n\nAlternatively, we could use the apply() function:\n\napply(M, MARGIN = 1, FUN = mean)\n\n[1] 1.5 3.5 5.5"
  },
  {
    "objectID": "Pages/Lab00/intro2r.html#custom-error-messages-in-functions",
    "href": "Pages/Lab00/intro2r.html#custom-error-messages-in-functions",
    "title": "Lab 00: Introduction to R",
    "section": "Custom Error Messages in Functions",
    "text": "Custom Error Messages in Functions\nIf we like, we can build in descriptive errors into a function. For example, say we want to define a function called add_2() which takes in a single numerical input x and outputs the value of x + 2. Further suppose we’d like our function to return an error message stating \"Input must be of type 'double' or 'integer'\" if the input is not numerical (i.e. neither an integer nor a double). We can do so by using the stop() function:\n\nadd_2 &lt;- function(x) {\n  if(!(typeof(x) == \"double\") & !(typeof(x) == \"integer\")) {\n    stop(\"Input must be of type 'double' or 'integer'\")\n  } else {\n    return(x + 2)\n  }\n}\n\nadd_2(4.2)\n\n[1] 6.2\n\nadd_2(\"hello\")\n\nError in add_2(\"hello\"): Input must be of type 'double' or 'integer'"
  },
  {
    "objectID": "Pages/Lab00/intro2r.html#recursion",
    "href": "Pages/Lab00/intro2r.html#recursion",
    "title": "Lab 00: Introduction to R",
    "section": "Recursion",
    "text": "Recursion\nYou have likely encountered the notion of recursion before, either in its mathematical or computing context. Loosely speaking, in computer science, we us the term recursion to describe a situation in which the current computational step depends on one or more computational steps that were completed in the past.\nA simple mathematical example of recursion is the Fibonacci Numbers, which is a sequence \\(\\{a_n\\}\\) of numbers defined through the recursive relationship \\[ a_0 = 0, \\quad a_1 = 1, \\quad a_{n} = a_{n - 1} + a_{n - 2} \\ (\\forall n \\geq 2) \\] For instance, the first 7 Fibonacci numbers are \\(\\{0, 1, 1, 2, 3, 5, 8\\}\\).\nLet’s say we want to create a function fib() that takes in a single integer input n and outputs the nth Fibonacci number. Firstly, this is not as simple as the examples we’ve seen before because there isn’t a closed-form formula for the nth Fibonacci number1.\n\nHowever, we can think of defining this function recursively. The key is to note that, if we have configured our fib() function correctly, we have that\n\nfib(n) = fib(n) + fib(n - 1)\n\nWe also know that\n\nfib(0) = 0\nfib(1) = 1\n\nThis motivates us to define our fib() function as follows:\n\nfib &lt;- Vectorize(function(n) {\n  if(n == 0) {\n    return(0)\n  } else if (n == 1) {\n    return(1)\n  } else {\n    return( fib(n - 1) + fib(n - 2))\n  }\n})\n\nAs an example:\n\nfib(1:7)\n\n[1]  1  1  2  3  5  8 13\n\n\nwhich matches what we computed “by hand”, above."
  },
  {
    "objectID": "Pages/Lab00/intro2r.html#footnotes",
    "href": "Pages/Lab00/intro2r.html#footnotes",
    "title": "Lab 00: Introduction to R",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nactually, this is a lie- there does exist a closed form expression for the nth Fibonacci number, but for the purposes of this exercise we are going to ignore that fact↩︎"
  },
  {
    "objectID": "Pages/Lab00/df_basics.html",
    "href": "Pages/Lab00/df_basics.html",
    "title": "Lab 00: Dataframe Basics",
    "section": "",
    "text": "Tip\n\n\n\nThis lab is long! Use the floating table of contents (at the top-right of the screen) to jump to sections as needed."
  },
  {
    "objectID": "Pages/Lab00/df_basics.html#lab-objectives",
    "href": "Pages/Lab00/df_basics.html#lab-objectives",
    "title": "Lab 00: Dataframe Basics",
    "section": "Lab Objectives",
    "text": "Lab Objectives\nThis lab covers the following topics:\n\nBasics of dataframes in R"
  },
  {
    "objectID": "Pages/Lab00/df_basics.html#relevant-textbook-chapterssections",
    "href": "Pages/Lab00/df_basics.html#relevant-textbook-chapterssections",
    "title": "Lab 00: Dataframe Basics",
    "section": "Relevant Textbook Chapters/Sections:",
    "text": "Relevant Textbook Chapters/Sections:\n\nPortions of Chapter 27 in R4DS"
  },
  {
    "objectID": "Pages/Lab00/df_basics.html#using-slicingindexing",
    "href": "Pages/Lab00/df_basics.html#using-slicingindexing",
    "title": "Lab 00: Dataframe Basics",
    "section": "Using Slicing/Indexing",
    "text": "Using Slicing/Indexing\nIf we have a dataframe called df, the command df[i, j] extracts the entry at the ith row and the jth column. For example:\n\nmy_df[1, 2]\n\n[1] \"hello\"\n\n\nWe can select multiple columns and/or rows by passing in a vector of values on either side of the comma:\n\nmy_df[c(1, 2), 2]\n\n[1] \"hello\" \"happy\"\n\n\nIf we want to extract all elements of row i, we can simply leave the column index blank:\n\nmy_df[1, ]\n\n  col1  col2\n1    2 hello\n\n\nIf we want to extract all elements of column j, we can simply leave the row index blank:\n\nmy_df[, 2]\n\n[1] \"hello\" \"happy\" \"world\"\n\n\n\n\n\n\n\n\nNote\n\n\n\nIt is important to note that rows and/or columns extracted from dataframes are stored as vectors:\n\nis.vector(my_df[,2])\n\n[1] TRUE\n\n\n\n\nA useful thing to note is that the synax a:b, where a and b are integers satisfying a &lt; b, generates the set of consecutive integers starting at a and ending at b:\n\n3:10\n\n[1]  3  4  5  6  7  8  9 10\n\n\nAnother way to generate sequences in R is to use the seq() function, which allows you to specify a start value, a stop value, and either the amount of space between successive values in the sequence or the number of elements to be included in the sequence:\n\nseq(0, 1, by = 0.1)\n\n [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\n\nseq(0, 1, length = 11)\n\n [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\n\nseq(0, 1, length = 10)\n\n [1] 0.0000000 0.1111111 0.2222222 0.3333333 0.4444444 0.5555556 0.6666667\n [8] 0.7777778 0.8888889 1.0000000"
  },
  {
    "objectID": "Pages/Lab00/df_basics.html#using-column-names",
    "href": "Pages/Lab00/df_basics.html#using-column-names",
    "title": "Lab 00: Dataframe Basics",
    "section": "Using Column Names",
    "text": "Using Column Names\nWe can also access individual columns of a dataframe by using the $ operator, followed by the name of the column. For example:\n\nmy_df$col1\n\n[1] 2 4 6\n\n\nWe can further subset by indexing on the selected column (again, remember that columns extracted from a dataframe are stored as vectors):\n\nmy_df$col1[2:3]\n\n[1] 4 6\n\n\nIf we want to select multiple columns by name, we cannot use the $ operator but must instead use the select() function from the dplyr package (contained in the tidyverse):\n\nselect(my_df, c(col1, col2))\n\n  col1  col2\n1    2 hello\n2    4 happy\n3    6 world"
  },
  {
    "objectID": "Pages/Lab00/df_basics.html#updatingreplacing-values",
    "href": "Pages/Lab00/df_basics.html#updatingreplacing-values",
    "title": "Lab 00: Dataframe Basics",
    "section": "Updating/Replacing Values",
    "text": "Updating/Replacing Values\nTo replace an already-existing element in a dataframe with another value, we can access the value and the use the variable assignment operator (&lt;-) to overwrite the previous value. For example:\n\nmy_df[1, 2] &lt;- \"greetings\"\nmy_df\n\n  col1      col2\n1    2 greetings\n2    4     happy\n3    6     world"
  },
  {
    "objectID": "Pages/Lab00/df_basics.html#adding-columns",
    "href": "Pages/Lab00/df_basics.html#adding-columns",
    "title": "Lab 00: Dataframe Basics",
    "section": "Adding Columns",
    "text": "Adding Columns\nTo add a column, simply use the $ syntax to pretend you were accessing the column (even though it doesn’t exist yet), and then use the variable assignment operator to pass in a set of values:\n\nmy_df$col3 &lt;- c(\"red\", \"green\", \"blue\")\nmy_df\n\n  col1      col2  col3\n1    2 greetings   red\n2    4     happy green\n3    6     world  blue\n\n\nWhat happens if we try and add a column that has more values than rows in our dataframe? Well, let’s see:\n\nmy_df$col4 &lt;- c(TRUE, FALSE, TRUE, FALSE)\n\nError in `$&lt;-.data.frame`(`*tmp*`, col4, value = c(TRUE, FALSE, TRUE, : replacement has 4 rows, data has 3\n\n\nSo, this is something important to note: when adding a column to a dataframe, you must ensure that the number of values you are adding is the same as the number of rows in the dataframe.\nSay we really wanted to add a fourth colunmn to our my_df dataframe, with the values c(TRUE, FALSE, TRUE, FALSE). We could simply add a fourth row of missing values (NA) to the already-existing dataframe, and then append the column:\n\nmy_df[4,] &lt;- c(NA, NA, NA)\nmy_df$col4 &lt;- c(TRUE, FALSE, TRUE, FALSE)\nmy_df\n\n  col1      col2  col3  col4\n1    2 greetings   red  TRUE\n2    4     happy green FALSE\n3    6     world  blue  TRUE\n4   NA      &lt;NA&gt;  &lt;NA&gt; FALSE\n\n\n\n\n\n\n\n\nCaution\n\n\n\nThere are pros and cons to doing this. On the one hand, we’ve successfully added all the values we wanted to into our new column. However, we have done so at the cost of injecting missingness into our data. Depending on what we plan to do with the dataframe this may or may not be a big deal- so, just think critically before doing something like this."
  },
  {
    "objectID": "Pages/Lab00/df_basics.html#changing-column-names",
    "href": "Pages/Lab00/df_basics.html#changing-column-names",
    "title": "Lab 00: Dataframe Basics",
    "section": "Changing Column Names",
    "text": "Changing Column Names\nThe column names of our my_df dataframe are pretty uninformative. Let’s see if we can give the columns more interesting names!\nTo access the column names of a dataframe, we can use either names() or colnames():\n\ncolnames(my_df)\n\n[1] \"col1\" \"col2\" \"col3\" \"col4\"\n\n\nTo rename our columns, we can simply assign (using the variable assignment operator) a new list of names:\n\ncolnames(my_df) &lt;- c(\"numbers\", \"words\", \"colors\", \"booleans\")\nmy_df\n\n  numbers     words colors booleans\n1       2 greetings    red     TRUE\n2       4     happy  green    FALSE\n3       6     world   blue     TRUE\n4      NA      &lt;NA&gt;   &lt;NA&gt;    FALSE\n\n\nWe can, if we like, do something similar to assign names to the rows of our dataframe:\n\nrownames(my_df) &lt;- c(\"row1\", \"row2\", \"row3\", \"row4\")\nmy_df\n\n     numbers     words colors booleans\nrow1       2 greetings    red     TRUE\nrow2       4     happy  green    FALSE\nrow3       6     world   blue     TRUE\nrow4      NA      &lt;NA&gt;   &lt;NA&gt;    FALSE"
  }
]