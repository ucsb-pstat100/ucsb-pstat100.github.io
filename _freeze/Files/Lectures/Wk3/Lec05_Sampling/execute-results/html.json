{
  "hash": "b65c9bca10cefb9463e8ad455d712077",
  "result": {
    "markdown": "---\ntitle: \"Lecture 05\"\nsubtitle: \"Sampling\"\ninstitute: \"PSTAT 100: Spring 2024\"\nauthor: \"Ethan Marzban\"\nfooter: \"UCSB: Department of Statistics and Applied Probability\"\nlogo: \"pstat_logo.svg\"\nformat: \n  revealjs:\n    theme: [moon, ../Styles/slides.scss]\n    multiplex: true\n    transition: fade\n    slide-number: true\n    incremental: true \n    chalkboard: true\n    html-math-method: mathjax\n    template-partials:\n        - ../Styles/title-slide.html\neditor: visual\nexecute:\n  freeze: auto\ntitle-slide-attributes:\n    data-background-image: \"hex_second_pass.svg\"\n    data-background-size: contain\n    data-background-opacity: \"0.5\"\n    data-background-position: left\ndf-print: paged\n---\n\n\n::: hidden\n$$\n\\newcommand\\R{\\mathbb{R}}\n\\newcommand{\\N}{\\mathbb{N}}\n\\newcommand{\\E}{\\mathbb{E}}\n\\newcommand{\\Prob}{\\mathbb{P}}\n\\newcommand{\\F}{\\mathcal{F}}\n\\newcommand{\\1}{1\\!\\!1}\n\\newcommand{\\comp}[1]{#1^{\\complement}}\n\\newcommand{\\Var}{\\mathrm{Var}}\n\\newcommand{\\SD}{\\mathrm{SD}}\n\\newcommand{\\vect}[1]{\\vec{\\boldsymbol{#1}}}\n\\newcommand{\\Cov}{\\mathrm{Cov}}\n\\usepackage[makeroom]{cancel}\n\\newcommand{\\iid}{\\stackrel{\\mathrm{i.i.d.}}{\\sim}}\n\\newcommand{\\Lik}{\\mathcal{L}}\n\\DeclareMathOperator*{\\argmax}{\\mathrm{arg max}}\n$$\n:::\n\n# Data: Where Did You Come From (and Where Did You Go?) {background-color=\"black\" background-image=\"https://i.makeagif.com/media/3-13-2015/DZSYo1.gif\"}\n\n## Leadup\n\n-   We've done a fair bit of work discussing data.\n\n-   One question we haven't really addressed, is: where does data come from?\n\n-   Firstly, why should we care about this?\n\n-   Remember: a crucial part of being a good data scientist is understanding our data as best we can.\n\n-   Part of this understanding entails understanding the mechanisms by which the data was collected, as these mechanisms can sometimes shed light on aspects of the data that were previously unseen.\n\n## Sampling {style=\"font-size:33px\"}\n\n-   There are three main things to keep in mind when it comes to sampling (which is typically the manner in which data is collected): the [**Target Population**]{style=\"color:#fa8b2f\"}, the [**Access Frame**]{style=\"color:#fa8b2f\"}, and the [**Sample**]{style=\"color:#fa8b2f\"}.\n\n-   The target population refers to the set of [**observational units**]{style=\"color:#fa8b2f\"} (remember these? these could be people, animals, countries, etc.) that we would like to investigate/make claims about.\n\n-   The access frame refers to the set of elements that we can actually reach/observe. In an ideal situation this would be the same as the target population, but in practice there may be differences (as we'll see in a bit).\n\n-   Finally, the sample is the subset of elements taken from the access frame that we actually end up observing.\n\n## Example: Voting\n\n-   To make things explicit, let's consider an example of telephone surveys.\n\n::: fragment\n> An election is coming up, and the campaign manager of Candidate X has hired us to determine (by way of telephone surveys) which US voters are most likely to vote for Candidate X.\n:::\n\n-   Here, the target population would be the set of all US voters.\n\n-   The access frame, however, will *not* be the same as the target population.\n\n## Example: Voting\n\n-   Why? Well, for one thing- not all US voters have a phone.\n\n-   Additionally, the access frame simply includes all people reachable by phone, which will include people *outside* the target population (e.g. teenagers under the age of 18, non-US-citizens, convicted felons, all of whom are ineligible to vote by US law).\n\n-   So, the relationship between the target population and the access frame might be visualized as something like this:\n\n## Example: Voting\n\n![](sampling3.svg)\n\n## Example: Voting\n\n-   Finally, our sample will be drawn from the sampled population (i.e. the intersection between the access frame and the target population).\n\n-   We'll spend a considerable portion of today's lecture talking about this step; for now, let's try and example in pairs/small groups.\n\n## Your Turn!\n\n::: callout-tip\n## **Your Turn!**\n\n\"Beginner's Luck\" refers to the (supposed) phenomenon by which first-time participants in a game or sport seem to perform abnormally well.\n\nSuppose a recent study claimed that \"15% of first-time poker players earned above-average net winnings across their first 10 games played.\" The study later clarified that the data was collected by surveying 100 randomly-selected poker players at 5 different LA-area casinos.\n\nIdentify (in words) the target population and access frame. Provide examples of individuals who are in the access frame but not the target population, and vice-versa.\n:::\n\n# Sampling\n\n## Why Sample? {style=\"font-size:33px\"}\n\n-   We'll now devote some time to talking about sampling procedures.\n\n-   Firstly, a question we should answer is: why bother taking samples at all?\n\n-   Well, firstly, a [**census**]{style=\"color:#fa8b2f\"} (in which every observations are made on *every single* observational unit in the target population) is almost always practically impossible.\n\n    -   This is usually due to the high costs (in time, money, effort, etc.) associated with a census.\n\n-   Even if we *were* able to take a census (which is sometimes possible), there is no guarantee this data would be perfect- it could have been sloppily recorded, it could have errors, etc.\n\n## Why Sample?\n\n-   There are also some situations in which observational units must be destroyed in order to be observed.\n\n    -   Lighthearted example: chocolate chips in cookies.\n\n    -   Less lighthearted example: post-mortem studies\n\n-   In such cases, taking a census would eliminate the population entirely, making *resampling* impossible. (Not to mention- it's just rude!)\n\n## Some Notation {style=\"font-size:30px\"}\n\n-   Let's start off by introducing some mathematical notation. Let $U_i$ denote an observational unit, and:\n\n::: fragment\n\n```{=tex}\n\\begin{align*}\n  \\mathcal{U}   & := \\{U_i\\}_{i \\in I}    & \\text{(universe)}   \\\\\n    T_P          &= \\{U_1, \\dots, U_N\\} \\subseteq \\mathcal{U} & \\text{(target pop.)} \\\\\n    F           &= \\{U_j: j \\in J \\subset I\\} & \\text{(frame)} \\\\\n    S_P           &:= T_P \\cap F & \\text{(sampled pop.)}   \\\\\n    S           &\\subseteq S_P &    \\text{(sample)}\n\\end{align*}\n```\n\n:::\n\n-   _I_: set of indices corresponding to the universe\n-   _N_: total number of observational units in the target population\n-   _J_: set of indices corresponding to observational units in the frame\n\n## Notation\n\n![](newsample3.svg)\n\n## How To Sample?\n\n-   Alright, so hopefully we're now convinced that sampling is a good idea.\n\n-   How do we do it?\n\n-   There are many [**sampling schemes**]{style=\"color:#fa8b2f\"} (aka sampling methods) available. Four common ones are:\n\n    -   [**Simple Random Sampling**]{style=\"color:#fa8b2f\"}\n    -   [**Stratified Sampling**]{style=\"color:#fa8b2f\"}\n    -   [**Cluster Sampling**]{style=\"color:#fa8b2f\"}\n    -   [**Convenience Sampling**]{style=\"color:#fa8b2f\"}\n\n\n## Simple Random Sampling\n\n-   In a [**Simple Random Sample**]{style=\"color:#fa8b2f\"}, we simply take a subset of size $n$ from the access frame.\n\n-   A hallmark of simple random sampling is that every observational unit has an equal chance of being included in the sample, independently of other observational units.\n\n    -   We'll talk more about the probabilistic mechanisms underpinning sampling in a bit; right now, I'm just trying to give a high-level overview of some of the different sampling schemes.\n    \n## Stratified Sampling\n\n::::{.columns}\n\n:::{.column width=\"50%\"}\n-   In a [**Stratified Sample**]{style=\"color:#fa8b2f\"} (sometimes called a [**Stratified Random Sample**]{style=\"color:#fa8b2f\"}), we first divide the access frame into several [**strata**]{style=\"color:#fa8b2f\"} (groups), and then take an SRS from each stratum.\n\n:::\n\n:::{.column width=\"50%\"}\n:::{.fragment}\n![](stratified.svg)\n:::\n:::\n\n::::\n\n-   Note that, by construction, each stratum will be represented in the sample.\n\n## Cluster Sampling\n\n\n::::{.columns}\n\n:::{.column width=\"50%\"}\n\n-   In a [**Cluster Sample**]{style=\"color:#fa8b2f\"}, we also begin by dividing the access frame into groups (now called [**clusters**]{style=\"color:#fa8b2f\"}). \n\n-   However, instead of taking an SRS from _each_ cluster, we first take an SRS of _clusters_, and then take an SRS from each of the _included_ clusters.\n\n:::\n\n:::{.column width=\"50%\"}\n:::{.fragment}\n![](cluster.svg)\n:::\n:::\n\n::::\n\n\n-   This means, in cluster sampling, some clusters will not be represented in the final sample.\n    \n## Comparison\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Lec05_Sampling_files/figure-revealjs/unnamed-chunk-1-1.png){width=960}\n:::\n:::\n\n    \n## Convenience Sampling\n\n-   A [**convenience**]{style=\"color:#fa8b2f\"} sample, much like the name suggests, refers to a sample that is taken purely out of convenience.\n\n    -   For instance, surveying the first 10 people you see on the street.\n    \n-   Convenience sampling is (out of the sampling methods) most prone to different forms of [**bias**]{style=\"color:#fa8b2f\"} (which we'll talk about in a bit), but can be a quick and easy way to obtain data.",
    "supporting": [
      "Lec05_Sampling_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}